#!/bin/bash

# Author: Jez Tucker
# Email:  chair@gpfsug.org
# Date:   Aug 14 2012
#
VERSION="0.1"
#
# This script is designed to be used when using TSM to HSM GPFS.
# A callback is required to be implmented with the additional %storagePool parameter.
#
#DISKSPACE
#	command       = /var/mmfs/etc/hsm_threshold_callback
#	event         = lowDiskSpace,noDiskSpace
#	node          = tsm01.rushesfx.co.uk
#	parms         = %eventName %fsName %storagePool



# Settings which affect TSM performance
NUM_MIGRATORS=2			# Number of tape drives to use
NUM_FILES_PER_MIG=5000		# Files sent per 'policy execution' = NUM_MIGRATORS x NUM_FILES_PER_MIG
HSMNODES='tsm01'

# GPFS Policy settings
POLROOT=/mnt/gpfs/resources/policies/by_stgpool
POLOPT="-a 4 -m $NUM_MIGRATORS -B $NUM_FILES_PER_MIG -g /mnt/gpfs/policytmp -s /mnt/gpfs/policytmp -N $HSMNODES"
LOGDIR=/var/log/gpfs/policies
LOCKDIR=/mnt/gpfs/policytmp
EMAILDEST='foo@bar.com'

EVENTTYPE=$1
FSNAME=$2
STGPOOL=$3

# Log that we have received the alert
echo "    Callback event: $EVENTTYPE, fs:$FSNAME stgpool:$STGPOOL"

# Check for valid events that this script can handle
if [ $EVENTTYPE != 'lowDiskSpace' ] && [ $EVENTTYPE != 'noDiskSpace' ]; then
    echo "Event type: $EVENTTYPE not handled. Exiting."
    exit 1;
fi

# If there's no disk space, send an urgent email
if [ $EVENTTYPE = 'noDiskSpace' ]; then
    echo "$STGPOOL noDiskSpace" | /bin/mail -s "GPFS Critical Error: $STGPOOL noDiskSpace" $EMAILDEST
fi

# Valid event recognised
if [ -r "$POLROOT/$STGPOOL/${STGPOOL}_hsm.pol" ]; then 

    if [ -f "$POLROOT/$STGPOOL/${STGPOOL}_hsm.pol.isdisabled" ]; then
        echo "       $STGPOOL HSM policy has been manually disabled"; 
        exit 0; 
    fi

    # Check what mode the policy should be running in
    if [ -f "$POLROOT/$STGPOOL/${STGPOOL}_hsm.pol.testmode" ]; then
        RUNMODE="-I test"
    else
        RUNMODE="-I yes"
    fi
    POLOPT="$POLOPT $RUNMODE"

    # Check for a lockdir for this policy
    if [ -d "$LOCKDIR/${STGPOOL}_hsm.lock" ]; then
        echo "      FS policy already running.  Not starting this instance.";

        # print some useful stats
        if [ -r "$LOCKDIR/${STGPOOL}_hsm.lock/pid" ]; then
	
            INFOPID=$(cat $LOCKDIR/${STGPOOL}_hsm.lock/pid)
            echo -n "          Process ID: $INFOPID        ";
        fi 

        if [ -r "$LOCKDIR/${STGPOOL}_hsm.lock/started" ]; then

            INFOSTART=$(cat $LOCKDIR/${STGPOOL}_hsm.lock/started)
            INFONOW=$(date +"%s")
            INFOELAPSED=$(expr $INFONOW - $INFOSTART) 
            printf "Running time: "%dh:%dm:%ds"" $(($INFOELAPSED/3600)) $(($INFOELAPSED%3600/60)) $(($INFOELAPSED%60))
        fi

        # Add a newline
        echo "";
   
    else # no policy running, (we think)
        echo "      Processing HSM policy $POLROOT/$STGPOOL/${STGPOOL}_hsm.pol on file system $FSNAME mode: $RUNMODE"

        # Create the directory lock  (directories are atomic, lock files are not)
        mkdir $LOCKDIR/${STGPOOL}_hsm.lock

        # If we couldn't create the directory email an alert and exit
        if [ ! -d "$LOCKDIR/${STGPOOL}_hsm.lock" ]; then
            echo "Could not create lockdir $LOCKDIR/${STGPOOL}_hsm.lock.  Failed to start HSM policy." | /bin/mail -s "GPFS Critical Error: Could not create lockdir $LOCKDIR/${STGPOOL}_hsm.lock" $EMAILDEST

            exit 1;
        fi

        # Run the policy
        /usr/lpp/mmfs/bin/mmapplypolicy $FSNAME -P $POLROOT/$STGPOOL/${STGPOOL}_hsm.pol $POLOPT > $LOGDIR/${STGPOOL}_hsm.pol.log.$(date +'%Y.%m.%d.%H.%M.%S').$(hostname -s) 2>&1 &
        POLPID=$!  # Process id of mmapplypolicy

        # Grab the return value from eval - did the process start OK?
        RET=$?

        # If mmapplypolicy started ok, store the policy process ID in a file in the lockdir, along with the unix time the policy was started
        if [ $RET -eq 0 ]; then 
            echo "$POLPID" > $LOCKDIR/${STGPOOL}_hsm.lock/pid
	    echo "$(date +%s)" > $LOCKDIR/${STGPOOL}_hsm.lock/started
        else
            # Remove the lockdir, if it exists
            rm -rf $LOCKDIR/${STGPOOL}_hsm.lock
        fi

        # Make this instance wait until the process has finished
        wait $POLPID

        # Remove the lockdir, if it exists
        rm -rf $LOCKDIR/${STGPOOL}_hsm.lock

        # Check that the lockdir was removed
        # If we couldn't create the directory email an alert and exit
        if [ -d "$LOCKDIR/${STGPOOL}_hsm.lock" ]; then
            echo "Could not remove lockdir $LOCKDIR/${STGPOOL}_hsm.lock.  Future HSM policies will not start." | /bin/mail -s "GPFS Critical Error: Could not create lockdir $LOCKDIR/${STGPOOL}_hsm.lock" $EMAILDEST
	
            # Make sure we exit with a failure
            $RET=1;
        fi
    fi
else

    # Log error message in GPFS ras log
    echo "$POLROOT/$STGPOOL/${STGPOOL}_hsm.pol not found."

    # Generate warning email
    echo "$POLROOT/$STGPOOL/${STGPOOL}_hsm.pol not found." | /bin/mail -s "GPFS Critical Error: $STGPOOL migrate script not found" $EMAILDEST
    RET=1
fi

exit $RET

# EOF
